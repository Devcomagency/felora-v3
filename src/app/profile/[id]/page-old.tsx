import ProfileClient from '@/components/ProfileClient'

interface ProfilePageProps {
  params: Promise<{ id: string }>
}

interface EscortProfile {
  id: string
  name: string
  stageName: string
  age: number
  location: string
  media: string
  gallery: string[]
  blurredGallery: string[]
  description: string
  services: string[]
  price: number
  rating: number
  reviews: number
  likes: number
  followers: number
  online: boolean
  lastSeen: string
  verified: boolean
  premium: boolean
  viewersCount: number
  responseRate: number
  responseTime: string
  unlockPrice: number
}

const profileMockData: { [key: string]: EscortProfile } = {
  '1': {
    id: '1',
    name: 'Sofia',
    stageName: 'Sofia Milano',
    age: 24,
    location: 'Gen√®ve',
    media: '/placeholder-avatar.jpg',
    gallery: [],
    blurredGallery: [],
    description: 'Bonjour mes amours üíã Je suis Sofia, une femme raffin√©e et passionn√©e qui saura vous faire vivre des moments inoubliables dans la belle ville de Gen√®ve. ‚ú®\n\nAvec mes 5 ann√©es d\'exp√©rience dans l\'accompagnement de qualit√©, je vous propose des services personnalis√©s et discrets adapt√©s √† tous vos d√©sirs. Que ce soit pour un d√Æner romantique, un √©v√©nement social, un voyage d\'affaires ou simplement pour passer un moment intime et relaxant, je sais m\'adapter √† chaque situation avec √©l√©gance et professionnalisme.\n\nüåü Mes sp√©cialit√©s :\n‚Ä¢ Girlfriend Experience authentique et naturelle\n‚Ä¢ Massages relaxants et sensoriels\n‚Ä¢ Accompagnement pour soir√©es et √©v√©nements\n‚Ä¢ Voyages et week-ends romantiques\n‚Ä¢ Services de domination douce pour les curieux\n\nüíé Ce qui me diff√©rencie :\n- Toujours impeccablement pr√©sent√©e\n- Conversation intelligente en fran√ßais, anglais et italien\n- Approche personnalis√©e selon vos envies\n- Discr√©tion absolue garantie\n- Hygi√®ne irr√©prochable\n- Ponctualit√© et respect des rendez-vous\n\nüè® Je re√ßois dans un appartement priv√©, discret et luxueux au c≈ìur de Gen√®ve, ou me d√©place dans les meilleurs h√¥tels de la r√©gion. Possibilit√© de d√©placements dans toute la Suisse romande sur demande.\n\n‚è∞ Disponibilit√©s : Du lundi au dimanche de 10h √† 21h (sur rendez-vous uniquement)\n\nüíå N\'h√©sitez pas √† me contacter pour discuter de vos attentes et organiser notre rencontre. Je r√©ponds personnellement √† tous les messages s√©rieux.\n\nAu plaisir de faire votre connaissance... üòò\nSofia ‚ù§Ô∏è',
    services: ['GFE', 'Massage', 'Accompagnement', 'Voyage', 'Soir√©es', 'Week-end', 'F√©tichisme soft', 'Domination l√©g√®re'],
    price: 800,
    rating: 4.9,
    reviews: 145,
    likes: 2340,
    followers: 1580,
    online: true,
    lastSeen: 'En ligne maintenant',
    verified: true,
    premium: true,
    viewersCount: 8,
    responseRate: 95,
    responseTime: '~2 min',
    unlockPrice: 35
  }
}

export default async function ProfilePage({ params }: ProfilePageProps) {
  const { id } = await params
  
  try {
    // Essayer de charger depuis l'API escort sp√©cifique d'abord
    const escortResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/escort/profile/${id}`, {
      cache: 'no-store'
    })
    
    if (escortResponse.ok) {
      const escortProfile = await escortResponse.json()
      console.log('üéØ Profil escort charg√© depuis la base:', escortProfile)
      
      // Convertir le profil escort en format attendu
      const profile: EscortProfile = {
        id: escortProfile.id,
        name: escortProfile.firstName || escortProfile.stageName || 'Unknown',
        stageName: escortProfile.stageName || escortProfile.firstName || 'Unknown',
        age: escortProfile.dateOfBirth ? 
          new Date().getFullYear() - new Date(escortProfile.dateOfBirth).getFullYear() : 25,
        location: escortProfile.city || 'Unknown',
        media: escortProfile?.profilePhoto || '/placeholder-avatar.jpg',
        gallery: escortProfile.galleryPhotos ? 
          JSON.parse(escortProfile.galleryPhotos).filter((m: any) => m.type === 'image').map((m: any) => m.url).slice(0, 6) : [],
        blurredGallery: escortProfile.galleryPhotos ? 
          JSON.parse(escortProfile.galleryPhotos).filter((m: any) => m.type === 'image').map((m: any) => m.url).slice(0, 6) : [],
        description: escortProfile.description || 'Aucune description disponible',
        services: escortProfile.services ? JSON.parse(escortProfile.services) : ['Accompagnement'],
        price: 350, // Prix par d√©faut
        rating: 4.9, // Rating par d√©faut
        reviews: 24, // Avis par d√©faut
        likes: 156, // Likes par d√©faut
        followers: 289, // Followers par d√©faut
        online: escortProfile.status === 'ACTIVE',
        lastSeen: escortProfile.status === 'ACTIVE' ? 'En ligne maintenant' : 'Vu r√©cemment',
        verified: escortProfile.isVerifiedBadge || false,
        premium: true, // Premium par d√©faut
        viewersCount: Math.floor(Math.random() * 20) + 5, // Viewers al√©atoires
        responseRate: 98, // Taux de r√©ponse par d√©faut
        responseTime: '~3 min', // Temps de r√©ponse par d√©faut
        unlockPrice: 30 // Prix d√©blocage par d√©faut
      }
      
      return <ProfileClient profile={profile} />
    }
    
    // Fallback vers l'ancienne API escorts
    const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/escorts`, {
      cache: 'no-store'
    })
    const data = await response.json()
    
    if (!data.success || !data.escorts) {
      throw new Error('Failed to load escorts')
    }
    
    // Trouver le profil correspondant
    const escort = data.escorts.find((e: any) => e.id === id)
    
    if (!escort) {
      // Fallback sur le mock data
      const profile = profileMockData[id] || profileMockData['1']
      return <ProfileClient profile={profile} />
    }
    
    // Adapter les donn√©es escort vers le format ProfileClient
    const profile: EscortProfile = {
      id: escort.id,
      name: escort.name,
      stageName: escort.username || escort.name,
      age: escort.age,
      location: escort.location,
      media: escort.profileImage || escort.media,
      gallery: escort.gallery || [escort.media, escort.profileImage].filter(Boolean),
      blurredGallery: escort.gallery?.map((img: string) => `${img}?blur=15`) || [],
      description: escort.description,
      services: escort.services || ['GFE', 'Massage', 'Accompagnement'],
      price: escort.price || 800,
      rating: escort.rating || 4.8,
      reviews: escort.reviews || 100,
      likes: escort.likes || 500,
      followers: escort.followers || 300,
      online: escort.online || false,
      lastSeen: escort.online ? 'En ligne maintenant' : 'Vu r√©cemment',
      verified: escort.verified || false,
      premium: escort.premium || false,
      viewersCount: Math.floor(Math.random() * 15) + 1,
      responseRate: 95,
      responseTime: '~2 min',
      unlockPrice: 35
    }

    return <ProfileClient profile={profile} />
    
  } catch (error) {
    console.error('Error loading profile:', error)
    // Fallback sur mock data
    const profile = profileMockData[id] || profileMockData['1']
    return <ProfileClient profile={profile} />
  }
}