import { NextRequest, NextResponse } from 'next/server'
import { headers } from 'next/headers'
import prisma from '@/lib/prisma'

/**
 * POST /api/webhooks/livepeer
 * Webhook pour recevoir les √©v√©nements Livepeer
 *
 * √âv√©nements support√©s:
 * - asset.created
 * - asset.updated
 * - asset.ready (transcodage termin√©)
 * - asset.failed
 */
export async function POST(request: NextRequest) {
  try {
    // 1. V√©rifier la signature du webhook (s√©curit√©)
    const headersList = headers()
    const signature = headersList.get('livepeer-signature')

    // TODO: V√©rifier la signature avec le secret webhook Livepeer
    // const isValid = verifySignature(signature, body, process.env.LIVEPEER_WEBHOOK_SECRET)
    // if (!isValid) {
    //   return NextResponse.json({ error: 'Invalid signature' }, { status: 401 })
    // }

    // 2. R√©cup√©rer le payload
    const payload = await request.json()
    const { event, payload: eventPayload } = payload

    console.log('üé¨ Webhook Livepeer re√ßu:', {
      event,
      assetId: eventPayload?.id,
      status: eventPayload?.status?.phase
    })

    // 3. Traiter les diff√©rents √©v√©nements
    switch (event) {
      case 'asset.created':
        await handleAssetCreated(eventPayload)
        break

      case 'asset.updated':
        await handleAssetUpdated(eventPayload)
        break

      case 'asset.ready':
        await handleAssetReady(eventPayload)
        break

      case 'asset.failed':
        await handleAssetFailed(eventPayload)
        break

      default:
        console.log('‚ÑπÔ∏è √âv√©nement non g√©r√©:', event)
    }

    return NextResponse.json({ success: true })

  } catch (error: any) {
    console.error('‚ùå Erreur webhook Livepeer:', error)
    return NextResponse.json(
      { error: 'Erreur traitement webhook', details: error.message },
      { status: 500 }
    )
  }
}

/**
 * Asset cr√©√© (d√©but du transcodage)
 */
async function handleAssetCreated(asset: any) {
  console.log('‚úÖ Asset cr√©√©:', asset.id)

  // Mettre √† jour la base de donn√©es
  await prisma.media.updateMany({
    where: { livepeerAssetId: asset.id },
    data: {
      status: 'processing',
      metadata: {
        livepeer: {
          assetId: asset.id,
          status: asset.status?.phase,
          createdAt: asset.createdAt,
        }
      }
    }
  })
}

/**
 * Asset mis √† jour (progression du transcodage)
 */
async function handleAssetUpdated(asset: any) {
  const progress = asset.status?.progress || 0
  console.log(`üìä Asset mis √† jour: ${asset.id} (${Math.round(progress * 100)}%)`)

  await prisma.media.updateMany({
    where: { livepeerAssetId: asset.id },
    data: {
      metadata: {
        livepeer: {
          assetId: asset.id,
          status: asset.status?.phase,
          progress,
          updatedAt: new Date().toISOString(),
        }
      }
    }
  })
}

/**
 * Asset pr√™t (transcodage termin√© avec succ√®s)
 */
async function handleAssetReady(asset: any) {
  console.log('üéâ Asset pr√™t:', asset.id)

  // Construire l'URL de lecture HLS
  const playbackUrl = asset.playbackId
    ? `https://lvpr.tv/?v=${asset.playbackId}`
    : null

  const hlsUrl = asset.playbackId
    ? `https://livepeercdn.studio/hls/${asset.playbackId}/index.m3u8`
    : null

  // Mettre √† jour en base
  await prisma.media.updateMany({
    where: { livepeerAssetId: asset.id },
    data: {
      status: 'ready',
      hlsUrl,
      playbackUrl,
      duration: asset.videoSpec?.duration,
      metadata: {
        livepeer: {
          assetId: asset.id,
          playbackId: asset.playbackId,
          status: 'ready',
          hlsUrl,
          playbackUrl,
          downloadUrl: asset.downloadUrl,
          duration: asset.videoSpec?.duration,
          resolution: `${asset.videoSpec?.width}x${asset.videoSpec?.height}`,
          completedAt: new Date().toISOString(),
        }
      }
    }
  })

  console.log('‚úÖ Base de donn√©es mise √† jour avec URL HLS:', hlsUrl)
}

/**
 * Asset √©chou√© (erreur pendant le transcodage)
 */
async function handleAssetFailed(asset: any) {
  console.error('‚ùå Asset √©chou√©:', asset.id, asset.status?.errorMessage)

  await prisma.media.updateMany({
    where: { livepeerAssetId: asset.id },
    data: {
      status: 'failed',
      metadata: {
        livepeer: {
          assetId: asset.id,
          status: 'failed',
          error: asset.status?.errorMessage,
          failedAt: new Date().toISOString(),
        }
      }
    }
  })
}

/**
 * GET - Pour v√©rifier que le webhook est configur√©
 */
export async function GET() {
  return NextResponse.json({
    service: 'Livepeer Webhook Handler',
    status: 'active',
    supportedEvents: [
      'asset.created',
      'asset.updated',
      'asset.ready',
      'asset.failed'
    ]
  })
}
