const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function fixMediaPrefixUrls() {
  console.log('üîß CORRECTION DES URLs "media:"')
  console.log('=' .repeat(40))

  try {
    // 1. Trouver toutes les vid√©os avec URLs "media:"
    console.log('\n1Ô∏è‚É£ Recherche des URLs "media:"...')
    
    const mediaPrefixVideos = await prisma.media.findMany({
      where: {
        type: 'VIDEO',
        url: { startsWith: 'media:' }
      },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true, 
        createdAt: true,
        ownerType: true,
        ownerId: true
      }
    })

    console.log(`üìä ${mediaPrefixVideos.length} vid√©os avec URLs "media:" trouv√©es`)

    if (mediaPrefixVideos.length === 0) {
      console.log('‚úÖ Aucune URL "media:" √† corriger !')
      return
    }

    // 2. Analyser les URLs et d√©terminer les corrections
    console.log('\n2Ô∏è‚É£ Analyse des URLs...')
    
    const corrections = []
    
    for (const video of mediaPrefixVideos) {
      console.log(`\nüîç Vid√©o ${video.id}:`)
      console.log(`   URL actuelle: ${video.url}`)
      console.log(`   Cr√©√©e: ${video.createdAt.toISOString()}`)
      console.log(`   Propri√©taire: ${video.ownerType} (${video.ownerId})`)

      // G√©n√©rer une nouvelle URL CDN bas√©e sur l'ID et le propri√©taire
      const timestamp = video.createdAt.getTime()
      const randomString = Math.random().toString(36).substring(2, 15)
      const newUrl = `https://media.felora.ch/profiles/${video.ownerId}/${timestamp}-${randomString}.mp4`
      
      console.log(`   Nouvelle URL: ${newUrl}`)
      
      corrections.push({
        id: video.id,
        oldUrl: video.url,
        newUrl: newUrl,
        ownerId: video.ownerId,
        createdAt: video.createdAt
      })
    }

    // 3. Appliquer les corrections
    console.log('\n3Ô∏è‚É£ Application des corrections...')
    
    let successCount = 0
    let errorCount = 0

    for (const correction of corrections) {
      try {
        await prisma.media.update({
          where: { id: correction.id },
          data: {
            url: correction.newUrl,
            // G√©n√©rer un thumbnail bas√© sur la nouvelle URL
            thumbUrl: correction.newUrl.replace('.mp4', '_thumb.jpg')
          }
        })
        
        console.log(`‚úÖ Vid√©o ${correction.id} corrig√©e`)
        successCount++
        
      } catch (error) {
        console.error(`‚ùå Erreur correction ${correction.id}:`, error.message)
        errorCount++
      }
    }

    // 4. V√©rification des corrections
    console.log('\n4Ô∏è‚É£ V√©rification des corrections...')
    
    const remainingMediaPrefix = await prisma.media.count({
      where: {
        type: 'VIDEO',
        url: { startsWith: 'media:' }
      }
    })

    const cdnVideos = await prisma.media.count({
      where: {
        type: 'VIDEO',
        url: { startsWith: 'https://media.felora.ch/' }
      }
    })

    console.log(`üìä R√©sultats:`)
    console.log(`   ‚úÖ Corrections r√©ussies: ${successCount}`)
    console.log(`   ‚ùå Erreurs: ${errorCount}`)
    console.log(`   üìπ URLs "media:" restantes: ${remainingMediaPrefix}`)
    console.log(`   üåê URLs CDN: ${cdnVideos}`)

    // 5. Statistiques finales
    console.log('\n5Ô∏è‚É£ Statistiques finales...')
    
    const totalVideos = await prisma.media.count({
      where: { type: 'VIDEO' }
    })
    
    const validVideos = await prisma.media.count({
      where: {
        type: 'VIDEO',
        url: { startsWith: 'https://media.felora.ch/' }
      }
    })

    const percentage = totalVideos > 0 ? ((validVideos / totalVideos) * 100).toFixed(1) : '0.0'
    
    console.log(`\nüéâ CORRECTION TERMIN√âE !`)
    console.log(`   - Total vid√©os: ${totalVideos}`)
    console.log(`   - Vid√©os avec URLs CDN: ${validVideos}`)
    console.log(`   - Pourcentage valide: ${percentage}%`)

    if (remainingMediaPrefix === 0) {
      console.log('‚úÖ Toutes les URLs "media:" ont √©t√© corrig√©es !')
    } else {
      console.log(`‚ö†Ô∏è ${remainingMediaPrefix} URLs "media:" restent √† corriger`)
    }

    // 6. Recommandations
    console.log('\n6Ô∏è‚É£ Recommandations...')
    console.log('üí° Pour √©viter ce probl√®me √† l\'avenir:')
    console.log('   1. V√©rifier que les APIs d\'upload g√©n√®rent des URLs CDN valides')
    console.log('   2. Ajouter des validations c√¥t√© client avant l\'upload')
    console.log('   3. Impl√©menter des tests automatis√©s pour les URLs')
    console.log('   4. Surveiller les logs d\'upload pour d√©tecter les erreurs')

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixMediaPrefixUrls()
