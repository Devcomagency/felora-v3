const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function fixVideoErrors() {
  console.log('üîß R√©paration des erreurs vid√©o...')

  try {
    // 1. Trouver toutes les vid√©os avec des probl√®mes
    console.log('\n1Ô∏è‚É£ Recherche des vid√©os probl√©matiques...')
    
    const problematicVideos = await prisma.media.findMany({
      where: {
        type: 'VIDEO',
        OR: [
          { url: { contains: 'undefined' } },
          { url: { contains: 'null' } },
          { url: { equals: '' } },
          { thumbUrl: { contains: 'undefined' } },
          { thumbUrl: { contains: 'null' } }
        ]
      },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true, 
        createdAt: true,
        ownerType: true,
        ownerId: true
      }
    })

    console.log(`üìä ${problematicVideos.length} vid√©os probl√©matiques trouv√©es`)

    if (problematicVideos.length === 0) {
      console.log('‚úÖ Aucune vid√©o probl√©matique trouv√©e !')
      return
    }

    // 2. Analyser chaque vid√©o probl√©matique
    console.log('\n2Ô∏è‚É£ Analyse des vid√©os probl√©matiques...')
    
    for (const video of problematicVideos) {
      console.log(`\nüîç Vid√©o ${video.id}:`)
      console.log(`   Type: ${video.type}`)
      console.log(`   Owner: ${video.ownerType} (${video.ownerId})`)
      console.log(`   URL: ${video.url}`)
      console.log(`   Thumb: ${video.thumbUrl}`)
      console.log(`   Cr√©√©e: ${video.createdAt.toISOString()}`)

      // Identifier le type de probl√®me
      let issues = []
      if (!video.url || video.url === '') issues.push('URL vide')
      if (video.url && video.url.includes('undefined')) issues.push('URL undefined')
      if (video.url && video.url.includes('null')) issues.push('URL null')
      if (video.thumbUrl && video.thumbUrl.includes('undefined')) issues.push('Thumb undefined')
      if (video.thumbUrl && video.thumbUrl.includes('null')) issues.push('Thumb null')

      console.log(`   Probl√®mes: ${issues.join(', ')}`)

      // Essayer de corriger l'URL
      let newUrl = video.url
      if (video.url && video.url.includes('undefined')) {
        newUrl = video.url.replace('undefined/', 'https://media.felora.ch/')
        console.log(`   ‚úÖ URL corrig√©e: ${newUrl}`)
      } else if (!video.url || video.url === '') {
        // Si l'URL est vide, marquer comme supprim√©
        newUrl = 'DELETED'
        console.log(`   ‚ö†Ô∏è URL vide - marqu√© comme supprim√©`)
      }

      // Essayer de corriger le thumbnail
      let newThumbUrl = video.thumbUrl
      if (video.thumbUrl && video.thumbUrl.includes('undefined')) {
        newThumbUrl = video.thumbUrl.replace('undefined/', 'https://media.felora.ch/')
        console.log(`   ‚úÖ Thumb corrig√©: ${newThumbUrl}`)
      } else if (video.thumbUrl && video.thumbUrl.includes('null')) {
        newThumbUrl = null
        console.log(`   ‚úÖ Thumb null supprim√©`)
      }

      // Mettre √† jour en base de donn√©es
      try {
        if (newUrl === 'DELETED') {
          // Supprimer la vid√©o si elle est vraiment cass√©e
          await prisma.media.delete({
            where: { id: video.id }
          })
          console.log(`   üóëÔ∏è Vid√©o ${video.id} supprim√©e (URL vide)`)
        } else {
          // Mettre √† jour la vid√©o
          await prisma.media.update({
            where: { id: video.id },
            data: {
              url: newUrl,
              thumbUrl: newThumbUrl
            }
          })
          console.log(`   ‚úÖ Vid√©o ${video.id} mise √† jour`)
        }
      } catch (error) {
        console.error(`   ‚ùå Erreur mise √† jour ${video.id}:`, error.message)
      }
    }

    // 3. V√©rifier les vid√©os avec des URLs valides mais qui pourraient poser probl√®me
    console.log('\n3Ô∏è‚É£ V√©rification des vid√©os avec URLs valides...')
    
    const validVideos = await prisma.media.findMany({
      where: {
        type: 'VIDEO',
        url: { not: { contains: 'undefined' } },
        url: { not: { contains: 'null' } },
        url: { not: '' }
      },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true,
        createdAt: true
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    })

    console.log(`üìä ${validVideos.length} vid√©os valides r√©centes v√©rifi√©es`)

    for (const video of validVideos) {
      console.log(`\nüîç Vid√©o ${video.id}:`)
      console.log(`   URL: ${video.url}`)
      console.log(`   Thumb: ${video.thumbUrl}`)
      console.log(`   Cr√©√©e: ${video.createdAt.toISOString()}`)
      
      // V√©rifier si l'URL semble valide
      if (video.url && video.url.startsWith('https://media.felora.ch/')) {
        console.log(`   ‚úÖ URL semble valide`)
      } else {
        console.log(`   ‚ö†Ô∏è URL suspecte`)
      }
    }

    // 4. Statistiques finales
    console.log('\n4Ô∏è‚É£ Statistiques finales...')
    
    const totalVideos = await prisma.media.count({
      where: { type: 'VIDEO' }
    })
    
    const problematicVideosAfter = await prisma.media.count({
      where: {
        type: 'VIDEO',
        OR: [
          { url: { contains: 'undefined' } },
          { url: { contains: 'null' } },
          { url: { equals: '' } },
          { url: null }
        ]
      }
    })

    console.log(`\nüéâ R√©paration termin√©e !`)
    console.log(`   - Total vid√©os: ${totalVideos}`)
    console.log(`   - Vid√©os probl√©matiques restantes: ${problematicVideosAfter}`)
    console.log(`   - Vid√©os corrig√©es: ${problematicVideos.length - problematicVideosAfter}`)

    if (problematicVideosAfter === 0) {
      console.log('‚úÖ Toutes les vid√©os probl√©matiques ont √©t√© corrig√©es !')
    } else {
      console.log('‚ö†Ô∏è Il reste des vid√©os probl√©matiques')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©paration des vid√©os:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixVideoErrors()
