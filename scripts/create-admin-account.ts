import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createAdminAccount() {
  const email = 'info@devcom.ch'
  const password = 'Admin2025!' // Change ce mot de passe

  try {
    console.log(`üîç V√©rification si ${email} existe d√©j√†...`)

    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      console.log('‚úÖ Le compte existe d√©j√†')
      console.log('üîÑ Mise √† jour en ADMIN...')

      await prisma.user.update({
        where: { email },
        data: { role: 'ADMIN' }
      })

      console.log('‚úÖ Compte mis √† jour en ADMIN')
    } else {
      console.log('‚ùå Le compte n\'existe pas')
      console.log('üî® Cr√©ation du compte ADMIN...')

      // Hasher le mot de passe
      const hashedPassword = await bcrypt.hash(password, 12)

      await prisma.user.create({
        data: {
          email,
          password: hashedPassword,
          name: 'Admin Devcom',
          role: 'ADMIN'
        }
      })

      console.log('‚úÖ Compte ADMIN cr√©√© avec succ√®s!')
      console.log(`üìß Email: ${email}`)
      console.log(`üîë Mot de passe: ${password}`)
      console.log('\n‚ö†Ô∏è  IMPORTANT: Change ce mot de passe apr√®s ta premi√®re connexion!')
    }

    // V√©rifier
    const admin = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        name: true,
        role: true
      }
    })

    console.log('\n‚úÖ Compte admin final:')
    console.table(admin)

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdminAccount()
