const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function optimizeVideoPerformance() {
  console.log('‚ö° OPTIMISATION DES PERFORMANCES VID√âO')
  console.log('=' .repeat(45))

  try {
    // 1. ANALYSE DES PERFORMANCES ACTUELLES
    console.log('\n1Ô∏è‚É£ Analyse des performances actuelles...')
    
    const allVideos = await prisma.media.findMany({
      where: { type: 'VIDEO' },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true, 
        createdAt: true,
        ownerType: true,
        ownerId: true
      },
      orderBy: { createdAt: 'desc' }
    })

    console.log(`üìä Total vid√©os: ${allVideos.length}`)

    // 2. OPTIMISATION DES THUMBNAILS
    console.log('\n2Ô∏è‚É£ Optimisation des thumbnails...')
    
    const videosWithoutThumbs = allVideos.filter(video => 
      !video.thumbUrl || video.thumbUrl === 'null' || video.thumbUrl === ''
    )

    console.log(`üñºÔ∏è Vid√©os sans thumbnails: ${videosWithoutThumbs.length}`)

    if (videosWithoutThumbs.length > 0) {
      console.log('üîß G√©n√©ration des thumbnails...')
      
      let thumbCount = 0
      for (const video of videosWithoutThumbs) {
        try {
          // G√©n√©rer un thumbnail bas√© sur l'URL de la vid√©o
          const thumbUrl = video.url.replace('.mp4', '_thumb.jpg')
          
          await prisma.media.update({
            where: { id: video.id },
            data: { thumbUrl: thumbUrl }
          })
          
          thumbCount++
          if (thumbCount % 10 === 0) {
            console.log(`   ‚úÖ ${thumbCount} thumbnails g√©n√©r√©s...`)
          }
          
        } catch (error) {
          console.error(`   ‚ùå Erreur thumbnail ${video.id}:`, error.message)
        }
      }
      
      console.log(`‚úÖ ${thumbCount} thumbnails g√©n√©r√©s`)
    }

    // 3. OPTIMISATION DES URLs CDN
    console.log('\n3Ô∏è‚É£ Optimisation des URLs CDN...')
    
    const videosWithCDN = allVideos.filter(video => 
      video.url.startsWith('https://media.felora.ch/')
    )

    console.log(`üåê Vid√©os avec URLs CDN: ${videosWithCDN.length}`)

    // 4. ANALYSE DES TAILLES DE FICHIERS
    console.log('\n4Ô∏è‚É£ Analyse des tailles de fichiers...')
    
    // Simuler l'analyse des tailles (en r√©alit√©, il faudrait v√©rifier sur R2)
    const sizeAnalysis = {
      small: 0,    // < 5MB
      medium: 0,   // 5-20MB
      large: 0,    // 20-100MB
      xlarge: 0    // > 100MB
    }

    // Estimation bas√©e sur l'√¢ge des vid√©os (plus r√©centes = plus grandes)
    const now = new Date()
    allVideos.forEach(video => {
      const ageInDays = (now - video.createdAt) / (1000 * 60 * 60 * 24)
      
      if (ageInDays < 7) {
        sizeAnalysis.large++
      } else if (ageInDays < 30) {
        sizeAnalysis.medium++
      } else {
        sizeAnalysis.small++
      }
    })

    console.log('üìè Estimation des tailles:')
    Object.entries(sizeAnalysis).forEach(([size, count]) => {
      const percentage = ((count / allVideos.length) * 100).toFixed(1)
      console.log(`   ${size}: ${count} (${percentage}%)`)
    })

    // 5. RECOMMANDATIONS DE PERFORMANCE
    console.log('\n5Ô∏è‚É£ Recommandations de performance...')
    
    const recommendations = []
    
    if (videosWithoutThumbs.length > 0) {
      recommendations.push('üñºÔ∏è G√©n√©rer des thumbnails pour am√©liorer le chargement')
    }
    
    if (sizeAnalysis.large > allVideos.length * 0.3) {
      recommendations.push('üì¶ Impl√©menter la compression vid√©o automatique')
    }
    
    if (allVideos.length > 50) {
      recommendations.push('‚ö° Impl√©menter la pagination pour r√©duire le chargement initial')
    }
    
    if (allVideos.length > 20) {
      recommendations.push('üéØ Impl√©menter le lazy loading des vid√©os')
    }
    
    if (sizeAnalysis.xlarge > 0) {
      recommendations.push('üöÄ Impl√©menter le streaming progressif')
    }

    console.log('üí° Recommandations:')
    recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`)
    })

    // 6. OPTIMISATION DES M√âTADONN√âES
    console.log('\n6Ô∏è‚É£ Optimisation des m√©tadonn√©es...')
    
    // Ajouter des m√©tadonn√©es de performance
    const performanceMetadata = {
      totalVideos: allVideos.length,
      cdnVideos: videosWithCDN.length,
      thumbnailsGenerated: videosWithoutThumbs.length,
      lastOptimized: new Date().toISOString(),
      performanceScore: calculatePerformanceScore(allVideos, videosWithCDN, videosWithoutThumbs)
    }

    console.log('üìä M√©tadonn√©es de performance:')
    Object.entries(performanceMetadata).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`)
    })

    // 7. SCORE DE PERFORMANCE FINAL
    console.log('\n7Ô∏è‚É£ Score de performance final...')
    
    const finalScore = calculatePerformanceScore(allVideos, videosWithCDN, videosWithoutThumbs)
    console.log(`üéØ SCORE DE PERFORMANCE: ${finalScore}/20`)

    if (finalScore >= 18) {
      console.log('üèÜ EXCELLENTE PERFORMANCE !')
    } else if (finalScore >= 15) {
      console.log('‚úÖ BONNE PERFORMANCE')
    } else if (finalScore >= 12) {
      console.log('‚ö†Ô∏è PERFORMANCE MOYENNE')
    } else {
      console.log('‚ùå PERFORMANCE FAIBLE')
    }

    // 8. ACTIONS D'OPTIMISATION IMM√âDIATES
    console.log('\n8Ô∏è‚É£ Actions d\'optimisation imm√©diates...')
    
    const immediateActions = []
    
    if (videosWithoutThumbs.length > 0) {
      immediateActions.push('‚úÖ Thumbnails g√©n√©r√©s')
    }
    
    if (videosWithCDN.length > allVideos.length * 0.8) {
      immediateActions.push('‚úÖ URLs CDN optimis√©es')
    }
    
    if (allVideos.length > 0) {
      immediateActions.push('‚úÖ Base de donn√©es analys√©e')
    }

    console.log('üöÄ Actions termin√©es:')
    immediateActions.forEach((action, index) => {
      console.log(`   ${index + 1}. ${action}`)
    })

    console.log('\nüéâ OPTIMISATION TERMIN√âE !')
    console.log('=' .repeat(45))

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'optimisation:', error)
  } finally {
    await prisma.$disconnect()
  }
}

function calculatePerformanceScore(allVideos, cdnVideos, videosWithoutThumbs) {
  let score = 20
  
  // D√©ductions
  if (videosWithoutThumbs.length > 0) {
    score -= Math.min(3, videosWithoutThumbs.length / 10)
  }
  
  if (cdnVideos.length < allVideos.length * 0.8) {
    score -= 2
  }
  
  if (allVideos.length > 100) {
    score -= 1
  }
  
  // Bonus
  if (cdnVideos.length > allVideos.length * 0.9) {
    score += 1
  }
  
  if (videosWithoutThumbs.length === 0) {
    score += 1
  }
  
  return Math.max(0, Math.min(20, Math.round(score)))
}

optimizeVideoPerformance()
