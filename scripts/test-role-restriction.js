// Script de test pour v√©rifier la restriction de r√¥le dans la messagerie
// √Ä ex√©cuter dans la console du navigateur

console.log('üîí Test de restriction de r√¥le pour la messagerie');

// Test 1: V√©rifier l'acc√®s √† la page des messages selon le r√¥le
function testMessageAccess() {
  console.log('Test 1: V√©rification de l\'acc√®s √† la page des messages');
  
  // Simuler diff√©rents r√¥les d'utilisateur
  const testRoles = ['client', 'escort', 'admin', 'moderator'];
  
  testRoles.forEach(role => {
    console.log(`R√¥le: ${role}`);
    if (role === 'client') {
      console.log('‚úÖ Acc√®s autoris√© - Les clients peuvent acc√©der √† la messagerie');
    } else {
      console.log('‚ùå Acc√®s refus√© - Seuls les clients peuvent acc√©der √† la messagerie');
    }
  });
}

// Test 2: V√©rifier l'API de cr√©ation de conversation
async function testCreateConversationAPI() {
  console.log('\nTest 2: V√©rification de l\'API de cr√©ation de conversation');
  
  const testCases = [
    { role: 'client', targetRole: 'escort', shouldWork: true },
    { role: 'escort', targetRole: 'client', shouldWork: false },
    { role: 'admin', targetRole: 'escort', shouldWork: false },
    { role: 'client', targetRole: 'client', shouldWork: false }
  ];
  
  for (const testCase of testCases) {
    console.log(`\nTest: ${testCase.role} ‚Üí ${testCase.targetRole}`);
    
    try {
      const response = await fetch('/api/e2ee/conversations/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          participantId: 'test-escort-id',
          introMessage: 'Test message'
        })
      });
      
      const data = await response.json();
      
      if (testCase.shouldWork) {
        if (response.ok) {
          console.log('‚úÖ Succ√®s - Conversation cr√©√©e (comme attendu)');
        } else {
          console.log('‚ùå √âchec - Conversation non cr√©√©e (inattendu)');
        }
      } else {
        if (!response.ok && data.error) {
          console.log('‚úÖ Succ√®s - Acc√®s refus√© (comme attendu):', data.error);
        } else {
          console.log('‚ùå √âchec - Acc√®s autoris√© (inattendu)');
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur de test:', error.message);
    }
  }
}

// Test 3: V√©rifier l'affichage des boutons Message
function testMessageButtonVisibility() {
  console.log('\nTest 3: V√©rification de l\'affichage des boutons Message');
  
  const testRoles = ['client', 'escort', 'admin', 'moderator'];
  
  testRoles.forEach(role => {
    console.log(`R√¥le: ${role}`);
    if (role === 'client') {
      console.log('‚úÖ Bouton Message visible - Les clients voient le bouton');
    } else {
      console.log('‚ùå Bouton Message masqu√© - Les non-clients ne voient pas le bouton');
    }
  });
}

// Ex√©cuter les tests
console.log('=== D√âBUT DES TESTS ===');
testMessageAccess();
testMessageButtonVisibility();

// D√©commentez la ligne suivante pour tester l'API (n√©cessite une session active)
// testCreateConversationAPI();

console.log('\n=== FIN DES TESTS ===');
console.log('Note: Pour tester l\'API, d√©commentez l\'appel √† testCreateConversationAPI()');
