const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function fixAllUndefinedMedia() {
  console.log('üîß R√©paration de tous les m√©dias undefined...')

  try {
    // 1. Trouver tous les m√©dias avec URLs undefined
    console.log('\n1Ô∏è‚É£ Recherche des m√©dias undefined...')
    const undefinedMedias = await prisma.media.findMany({
      where: {
        OR: [
          { url: { contains: 'undefined' } },
          { thumbUrl: { contains: 'undefined' } }
        ]
      },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true, 
        type: true,
        createdAt: true,
        ownerType: true,
        ownerId: true
      }
    })

    console.log(`üìä ${undefinedMedias.length} m√©dias undefined trouv√©s`)

    if (undefinedMedias.length === 0) {
      console.log('‚úÖ Aucun m√©dia undefined √† r√©parer !')
      return
    }

    // 2. Corriger les URLs undefined
    console.log('\n2Ô∏è‚É£ Correction des URLs undefined...')
    let fixedCount = 0

    for (const media of undefinedMedias) {
      console.log(`\nüîß R√©paration m√©dia ${media.id}:`)
      console.log(`   Type: ${media.type}`)
      console.log(`   Owner: ${media.ownerType} (${media.ownerId})`)
      console.log(`   URL: ${media.url}`)
      console.log(`   Thumb: ${media.thumbUrl}`)

      // Corriger l'URL principale
      let newUrl = media.url
      if (media.url && media.url.includes('undefined')) {
        newUrl = media.url.replace('undefined/', 'https://media.felora.ch/')
        console.log(`   ‚úÖ URL corrig√©e: ${newUrl}`)
      }

      // Corriger l'URL de thumbnail
      let newThumbUrl = media.thumbUrl
      if (media.thumbUrl && media.thumbUrl.includes('undefined')) {
        newThumbUrl = media.thumbUrl.replace('undefined/', 'https://media.felora.ch/')
        console.log(`   ‚úÖ Thumb corrig√©: ${newThumbUrl}`)
      }

      // Mettre √† jour en base de donn√©es
      try {
        await prisma.media.update({
          where: { id: media.id },
          data: {
            url: newUrl,
            thumbUrl: newThumbUrl
          }
        })
        console.log(`   ‚úÖ M√©dia ${media.id} mis √† jour avec succ√®s`)
        fixedCount++
      } catch (error) {
        console.error(`   ‚ùå Erreur mise √† jour ${media.id}:`, error.message)
      }
    }

    // 3. V√©rifier les profils escort avec des avatars/galeries undefined
    console.log('\n3Ô∏è‚É£ V√©rification des profils escort...')
    const escortProfiles = await prisma.escortProfile.findMany({
      where: {
        profilePhoto: { contains: 'undefined' }
      },
      select: { 
        id: true, 
        stageName: true, 
        profilePhoto: true, 
        galleryPhotos: true 
      }
    })

    console.log(`üìä ${escortProfiles.length} profils escort avec m√©dias undefined trouv√©s`)

    for (const profile of escortProfiles) {
      console.log(`\nüîß R√©paration profil escort ${profile.stageName}:`)

      // Corriger l'avatar
      let newProfilePhoto = profile.profilePhoto
      if (profile.profilePhoto && profile.profilePhoto.includes('undefined')) {
        newProfilePhoto = profile.profilePhoto.replace('undefined/', 'https://media.felora.ch/')
        console.log(`   ‚úÖ Avatar corrig√©: ${newProfilePhoto}`)
      }

      // Corriger la galerie
      let newGalleryPhotos = profile.galleryPhotos
      if (profile.galleryPhotos && profile.galleryPhotos.some(url => url.includes('undefined'))) {
        newGalleryPhotos = profile.galleryPhotos.map(url => 
          url.includes('undefined') ? url.replace('undefined/', 'https://media.felora.ch/') : url
        )
        console.log(`   ‚úÖ Galerie corrig√©e: ${newGalleryPhotos.length} photos`)
      }

      // Mettre √† jour en base de donn√©es
      try {
        await prisma.escortProfile.update({
          where: { id: profile.id },
          data: {
            profilePhoto: newProfilePhoto,
            galleryPhotos: newGalleryPhotos
          }
        })
        console.log(`   ‚úÖ Profil escort ${profile.stageName} mis √† jour avec succ√®s`)
        fixedCount++
      } catch (error) {
        console.error(`   ‚ùå Erreur mise √† jour profil ${profile.stageName}:`, error.message)
      }
    }

    // 4. V√©rifier les profils club avec des m√©dias undefined
    console.log('\n4Ô∏è‚É£ V√©rification des profils club...')
    const clubProfiles = await prisma.clubProfileV2.findMany({
      where: {
        profilePhoto: { contains: 'undefined' }
      },
      select: { 
        id: true, 
        name: true, 
        profilePhoto: true, 
        galleryPhotos: true 
      }
    })

    console.log(`üìä ${clubProfiles.length} profils club avec m√©dias undefined trouv√©s`)

    for (const profile of clubProfiles) {
      console.log(`\nüîß R√©paration profil club ${profile.name}:`)

      // Corriger l'avatar
      let newProfilePhoto = profile.profilePhoto
      if (profile.profilePhoto && profile.profilePhoto.includes('undefined')) {
        newProfilePhoto = profile.profilePhoto.replace('undefined/', 'https://media.felora.ch/')
        console.log(`   ‚úÖ Avatar corrig√©: ${newProfilePhoto}`)
      }

      // Corriger la galerie
      let newGalleryPhotos = profile.galleryPhotos
      if (profile.galleryPhotos && profile.galleryPhotos.some(url => url.includes('undefined'))) {
        newGalleryPhotos = profile.galleryPhotos.map(url => 
          url.includes('undefined') ? url.replace('undefined/', 'https://media.felora.ch/') : url
        )
        console.log(`   ‚úÖ Galerie corrig√©e: ${newGalleryPhotos.length} photos`)
      }

      // Mettre √† jour en base de donn√©es
      try {
        await prisma.clubProfileV2.update({
          where: { id: profile.id },
          data: {
            profilePhoto: newProfilePhoto,
            galleryPhotos: newGalleryPhotos
          }
        })
        console.log(`   ‚úÖ Profil club ${profile.name} mis √† jour avec succ√®s`)
        fixedCount++
      } catch (error) {
        console.error(`   ‚ùå Erreur mise √† jour profil ${profile.name}:`, error.message)
      }
    }

    // 5. V√©rification finale
    console.log('\n5Ô∏è‚É£ V√©rification finale...')
    const remainingUndefined = await prisma.media.count({
      where: {
        OR: [
          { url: { contains: 'undefined' } },
          { thumbUrl: { contains: 'undefined' } }
        ]
      }
    })

    console.log(`\nüéâ R√©paration termin√©e !`)
    console.log(`   - ${fixedCount} √©l√©ments corrig√©s`)
    console.log(`   - ${remainingUndefined} m√©dias undefined restants`)

    if (remainingUndefined === 0) {
      console.log('‚úÖ Tous les m√©dias undefined ont √©t√© r√©par√©s !')
    } else {
      console.log('‚ö†Ô∏è Il reste des m√©dias undefined √† r√©parer')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©paration:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixAllUndefinedMedia()
