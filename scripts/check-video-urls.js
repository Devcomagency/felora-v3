const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkVideoUrls() {
  console.log('üîç V√©rification des URLs vid√©o...')

  try {
    // 1. R√©cup√©rer toutes les vid√©os r√©centes
    console.log('\n1Ô∏è‚É£ R√©cup√©ration des vid√©os r√©centes...')
    
    const recentVideos = await prisma.media.findMany({
      where: {
        type: 'VIDEO',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Derni√®re 24 heures
        }
      },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true, 
        createdAt: true,
        ownerType: true,
        ownerId: true
      },
      orderBy: { createdAt: 'desc' }
    })

    console.log(`üìä ${recentVideos.length} vid√©os r√©centes trouv√©es`)

    if (recentVideos.length === 0) {
      console.log('‚úÖ Aucune vid√©o r√©cente trouv√©e')
      return
    }

    // 2. Analyser chaque vid√©o
    console.log('\n2Ô∏è‚É£ Analyse des URLs vid√©o...')
    
    for (const video of recentVideos) {
      console.log(`\nüîç Vid√©o ${video.id}:`)
      console.log(`   Type: ${video.type}`)
      console.log(`   Owner: ${video.ownerType} (${video.ownerId})`)
      console.log(`   URL: ${video.url}`)
      console.log(`   Thumb: ${video.thumbUrl}`)
      console.log(`   Cr√©√©e: ${video.createdAt.toISOString()}`)

      // V√©rifier la structure de l'URL
      if (video.url) {
        if (video.url.startsWith('https://media.felora.ch/')) {
          console.log(`   ‚úÖ URL CDN valide`)
        } else if (video.url.startsWith('/uploads/')) {
          console.log(`   ‚úÖ URL locale valide`)
        } else if (video.url.startsWith('http://') || video.url.startsWith('https://')) {
          console.log(`   ‚úÖ URL externe valide`)
        } else {
          console.log(`   ‚ö†Ô∏è URL suspecte: ${video.url}`)
        }
      } else {
        console.log(`   ‚ùå URL manquante`)
      }

      // V√©rifier le thumbnail
      if (video.thumbUrl) {
        if (video.thumbUrl.startsWith('https://media.felora.ch/')) {
          console.log(`   ‚úÖ Thumb CDN valide`)
        } else if (video.thumbUrl.startsWith('/uploads/')) {
          console.log(`   ‚úÖ Thumb locale valide`)
        } else {
          console.log(`   ‚ö†Ô∏è Thumb suspect: ${video.thumbUrl}`)
        }
      } else {
        console.log(`   ‚ÑπÔ∏è Thumb manquant (normal pour les vid√©os)`)
      }
    }

    // 3. V√©rifier les vid√©os avec des patterns d'URL suspects
    console.log('\n3Ô∏è‚É£ Recherche de patterns suspects...')
    
    const suspiciousVideos = await prisma.media.findMany({
      where: {
        type: 'VIDEO',
        OR: [
          { url: { contains: 'undefined' } },
          { url: { contains: 'null' } },
          { url: { contains: 'NaN' } },
          { url: { contains: 'undefined' } },
          { url: { startsWith: 'undefined' } },
          { url: { startsWith: 'null' } }
        ]
      },
      select: { 
        id: true, 
        url: true, 
        thumbUrl: true, 
        createdAt: true
      }
    })

    console.log(`üìä ${suspiciousVideos.length} vid√©os suspectes trouv√©es`)

    if (suspiciousVideos.length > 0) {
      console.log('\n‚ö†Ô∏è Vid√©os suspectes d√©tect√©es:')
      for (const video of suspiciousVideos) {
        console.log(`   - ${video.id}: ${video.url}`)
      }
    } else {
      console.log('‚úÖ Aucune vid√©o suspecte trouv√©e')
    }

    // 4. Statistiques g√©n√©rales
    console.log('\n4Ô∏è‚É£ Statistiques g√©n√©rales...')
    
    const totalVideos = await prisma.media.count({
      where: { type: 'VIDEO' }
    })
    
    const videosWithThumb = await prisma.media.count({
      where: { 
        type: 'VIDEO',
        thumbUrl: { not: null }
      }
    })
    
    const videosWithoutThumb = totalVideos - videosWithThumb

    console.log(`\nüìà Statistiques vid√©o:`)
    console.log(`   - Total vid√©os: ${totalVideos}`)
    console.log(`   - Avec thumbnail: ${videosWithThumb}`)
    console.log(`   - Sans thumbnail: ${videosWithoutThumb}`)
    console.log(`   - Vid√©os r√©centes (24h): ${recentVideos.length}`)

    // 5. Recommandations
    console.log('\n5Ô∏è‚É£ Recommandations...')
    
    if (suspiciousVideos.length > 0) {
      console.log('‚ö†Ô∏è Actions recommand√©es:')
      console.log('   1. Corriger les URLs suspectes')
      console.log('   2. V√©rifier la configuration CDN')
      console.log('   3. Tester les uploads de vid√©os')
    } else {
      console.log('‚úÖ Toutes les vid√©os semblent avoir des URLs valides')
      console.log('üí° Si vous voyez encore des erreurs vid√©o:')
      console.log('   1. V√©rifiez que les fichiers existent sur le CDN')
      console.log('   2. V√©rifiez les permissions des fichiers')
      console.log('   3. Testez les URLs dans un navigateur')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des URLs:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkVideoUrls()
